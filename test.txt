public async Task<FisUserCreationAugmentedResult> ActivateDeactivateUser(ActivateUserRequestModel requestModel, string firmName)
{
    _logger.LogInformation($"User Activate/Deactivate Initiated for External UserId {requestModel.ExternalUserId}");

    var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();

    var status = requestModel.Status ? 1 : 0;

    _logger.LogInformation($"User status is {status} for External UserId {requestModel.ExternalUserId}");

    string url = $"{_userBusinessSettings.FisIdpUrlForUser}activate/{requestModel.ExternalUserId}?status={status}";
    var json = JsonConvert.SerializeObject(requestModel, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
    var content = new StringContent(json, Encoding.UTF8, "application/json");

    _httpClient.DefaultRequestHeaders.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
    _httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
    _httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
    _httpClient.DefaultRequestHeaders.Add("selected-firm-name", firmName);

    try
    {
        var httpResponse = await _httpClient.PutAsync(url, content);
        if (httpResponse.IsSuccessStatusCode)
        {
            fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;

            _logger.LogInformation($"User activated/deactivated in External portal for UserId: {requestModel.ExternalUserId}");
        }
        else
        {
            // Handle non-successful status codes here if needed.
            fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while activated/deactivated user in external provider.";
            fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
            _logger.LogError($"Error occurred while activated/deactivated user in external provider. Status Code: {httpResponse.StatusCode}");
        }
    }
    catch (HttpRequestException ex)
    {
        // The HttpClient request failed (e.g., network error, DNS resolution issue).
        _logger.LogError("Error occurred while activated/deactivated user in external provider: " + ex.Message);
        fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
        fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while activated/deactivated user in external provider.";
    }
    catch (Exception ex)
    {
        // Other exceptions (e.g., JSON serialization, reading response content, etc.).
        _logger.LogError("Error occurred while activated/deactivated user in external provider: " + ex.Message);
        fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
        fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while activated/deactivated user in external provider.";
    }

    return fisUserCreationAugmentedResult;
}
