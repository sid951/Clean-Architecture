 public async Task<FisUserCreationAugmentedResult> AddUserToExternalProvider(CreateUserCommandRequestModel user)
        {
            var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();
            var getAddUserToExternalProviderDepartmentDetails = GetDepartment(ref fisUserCreationAugmentedResult, user.FirmName);
            var getAddUserToExternalProviderUserProfileDetails = GetUserProfile(ref fisUserCreationAugmentedResult, user.FirmName);
            var getAddUserToExternalProviderFisIdpUserModel = GetFisIdpUserModel(user, user.FirmName, getAddUserToExternalProviderDepartmentDetails, getAddUserToExternalProviderUserProfileDetails);

            try
            {
                string urlFisIdpUrlForUser = _userBusinessSettings.FisIdpUrlForUser;
                var json = JsonConvert.SerializeObject(getAddUserToExternalProviderFisIdpUserModel, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                using (var httpClientAddUserToExternalProvider = new HttpClient())
                {
                    httpClientAddUserToExternalProvider.DefaultRequestHeaders.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
                    httpClientAddUserToExternalProvider.DefaultRequestHeaders.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
                    httpClientAddUserToExternalProvider.DefaultRequestHeaders.Add("Accept", "application/json");
                    httpClientAddUserToExternalProvider.DefaultRequestHeaders.Add("selected-firm-name", user.FirmName);

                    var httpResponseAddUserToExternalProvider = await httpClientAddUserToExternalProvider.PostAsync(urlFisIdpUrlForUser, content);
                    if (httpResponseAddUserToExternalProvider.IsSuccessStatusCode)
                    {

                        var result = await httpResponseAddUserToExternalProvider.Content.ReadAsStringAsync();
                        var fisIdpUser = JsonConvert.DeserializeObject<FisIdpUserModel>(result);
                        fisUserCreationAugmentedResult.ExternalUserId = fisIdpUser.Id;
                        fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                        _logger.LogInformation("User Created in FIS IDP for username {UserName} with external user id {Id}", user.UserName, fisIdpUser.Id);
                    }
                    else
                    {
                            var errorResponseContentAddUserToExternalProvider = await httpResponseAddUserToExternalProvider.Content.ReadAsStringAsync();
                            var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(errorResponseContentAddUserToExternalProvider);

                            _logger.LogError("Logging error string received from fis IDP: {ErrorResponseContentAddUserToExternalProvider}", errorResponseContentAddUserToExternalProvider);

                            var userAlreadyExists = false;
                            errLogs.Messages.ForEach(valitionResponseItem =>
                            {
                                if (valitionResponseItem.Message.Contains(_userBusinessSettings.UserAlreadyExistValidationMessageString))
                                {
                                    userAlreadyExists = true;
                                }
                            });

                            if (userAlreadyExists)
                            {
                                var fisIdpUser = GetFisIdpUserByName(user.UserName, user.FirmName);
                                _logger.LogInformation("User already exists in FIS IDP for username {UserName} with external user id {Id}", user.UserName, fisIdpUser.Id);
                                
                                if (IsFisIdpUserMatchingPanoramaUserData(user.Email.EmailAddress, user.UserName, fisIdpUser))
                                {
                                    if (await CheckUserRoleAndProfileOfExistingFisIdpUser(fisIdpUser, user.FirmName))
                                    {
                                        fisUserCreationAugmentedResult.ExternalUserId = fisIdpUser.Id;
                                        fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                                    }
                                    else
                                    {
                                        LinkFisIdpUserWithPanorama(fisIdpUser, ref fisUserCreationAugmentedResult, user.FirmName, getAddUserToExternalProviderDepartmentDetails, getAddUserToExternalProviderUserProfileDetails);
                                    }
                                }
                                else
                                {
                                    fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                                    fisUserCreationAugmentedResult.IsConflict = true;
                                    fisUserCreationAugmentedResult.FisIdpUserModel = new UserModel()
                                    {
                                        FirstName = fisIdpUser.FirstName,
                                        LastName = fisIdpUser.LastName,
                                        EmailAddress = fisIdpUser.EmailAddress,
                                        MiddleName = fisIdpUser.MiddleName,
                                        UserId = fisIdpUser.LoginName
                                    };
                                }
                            }
                            else
                            {
                                fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                                fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                            }                       
                    }
                }
            }

            catch (Exception ex)
            {
                _logger.LogError("Error occurred while creating a user in external provider: {Message}", ex.Message);
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while creating a user in external provider.";
            }


            return fisUserCreationAugmentedResult;
        }
