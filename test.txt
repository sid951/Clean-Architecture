using System;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

public class MyClass
{
    private readonly HttpClient _httpClient;
    private readonly ILogger _logger;
    private readonly UserBusinessSettings _userBusinessSettings;

    public MyClass(HttpClient httpClient, ILogger logger, UserBusinessSettings userBusinessSettings)
    {
        _httpClient = httpClient;
        _logger = logger;
        _userBusinessSettings = userBusinessSettings;
    }

      public async Task<FisUserCreationAugmentedResult> AddUserToExternalProvider(CreateUserCommandRequestModel model)
        {
            

            var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();
            var getDepartmentDetails = GetDepartment(ref fisUserCreationAugmentedResult, model.FirmName);
            var getUserProfileDetails = GetUserProfile(ref fisUserCreationAugmentedResult, model.FirmName);
            var getFisIdpUserModel = GetFisIdpUserModel(model, model.FirmName, getDepartmentDetails, getUserProfileDetails);
            var httpWebRequest = (HttpWebRequest)WebRequest.Create(_userBusinessSettings.FisIdpUrlForUser);

            httpWebRequest.ContentType = "application/json";
            httpWebRequest.Method = "POST";
            httpWebRequest.Headers.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
            httpWebRequest.Headers.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
            httpWebRequest.Headers.Add("Accept", "application/json");
            httpWebRequest.Headers.Add("selected-firm-name", model.FirmName);

            try
            {
                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    string json = JsonConvert.SerializeObject(getFisIdpUserModel, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
                    streamWriter.Write(json);
                }

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    var result = streamReader.ReadToEnd();
                    var fisIdpUser = JsonConvert.DeserializeObject<FisIdpUserModel>(result);
                    fisUserCreationAugmentedResult.ExternalUserId = fisIdpUser.Id;
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                    _logger.LogInformation($"User Created in FIS IDP for username {model.UserName} with external user id {fisIdpUser.Id}");
                }
            }
            catch (WebException ex)
            {
                var response = (HttpWebResponse)ex.Response;

                _logger.LogError("Error occurred while creating a user in external provider." + ex.Message );

                try
                {
                    var webResponse = (HttpWebResponse)ex.Response;
                    var content = webResponse.GetResponseStream();
                    var encode = System.Text.Encoding.GetEncoding("utf-8");
                    StreamReader readStream = new StreamReader(content, encode);
                    String str = readStream.ReadToEnd();
                    var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                    _logger.LogError("Logging error string received from fis IDP" + str);

                    var userAlreadyExists = false;
                    errLogs.Messages.ForEach(valitionResponseItem =>
                    {
                        if (valitionResponseItem.Message.Contains(_userBusinessSettings.UserAlreadyExistValidationMessageString))
                        {
                            userAlreadyExists = true;
                        }
                    });

                    if (userAlreadyExists)
                    {
                        var fisIdpUser = GetFisIdpUserByName(model.UserName, model.FirmName);
                        _logger.LogInformation($"User already exists in FIS IDP for username {model.UserName} with external user id {fisIdpUser.Id}");
                        _logger.LogInformation("Validating the FIS IDP user against user input data");

                        if (IsFisIdpUserMatchingPanoramaUserData(model.Email.EmailAddress, model.UserName, fisIdpUser))
                        {
                            if (await CheckUserRoleAndProfileOfExistingFisIdpUser(fisIdpUser, model.FirmName))
                            {
                                fisUserCreationAugmentedResult.ExternalUserId = fisIdpUser.Id;
                                fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                            }
                            else
                            {
                                LinkFisIdpUserWithPanorama(fisIdpUser, false, ref fisUserCreationAugmentedResult, model.FirmName, getDepartmentDetails, getUserProfileDetails);
                            }
                        }
                        else
                        {
                            fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                            fisUserCreationAugmentedResult.IsConflict = true;
                            fisUserCreationAugmentedResult.FisIdpUserModel = new UserModel()
                            {
                                FirstName = fisIdpUser.FirstName,
                                LastName = fisIdpUser.LastName,
                                EmailAddress = fisIdpUser.EmailAddress,
                                MiddleName = fisIdpUser.MiddleName,
                                UserId = fisIdpUser.LoginName
                            };
                        }
                    }
                    else
                    {
                        fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                        fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                    }
                }
                catch (Exception exception)
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while creating a user in external provider. " + ex?.Message;
                    _logger.LogError("Error occurred while creating a user in external provider." + ex?.Message);
                    _logger.LogError("Error occurred while creating a user in external provider." + exception?.Message);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Error occurred while creating a user in external provider " + ex.Message);
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while creating a user in external provider.";
            }

            return fisUserCreationAugmentedResult;
        }
}
