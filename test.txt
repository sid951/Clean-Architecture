using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;

namespace Panorama.Users.ExternalProvider.Implementations
{

    using Panorama.Core.Infrastructure.Enums;
    using Panorama.Users.Domain.RequestModels;
    using Panorama.Users.Domain.RequestModels.CommandRequestModels;
    using Panorama.Users.Domain.ResponseModels.CommanResponseModels;
    using Panorama.Users.ExternalProvider.Abstractions;
    using Panorama.Users.ExternalProvider.Models;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Reflection;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// ExternalProviderUserService
    /// </summary>
    public class ExternalProviderUserService : IExternalProviderUserService
    {
        private readonly ILogger _logger;
        private readonly ExternalUserDefaultSettings _externalUserDefaultSettings = null;
        private readonly UserBusinessSettings _userBusinessSettings = null;

        /// <summary>
        /// constructor for ExternalProviderUserService
        /// </summary>
        /// <param name="logger"></param>
        /// <param name="externalUserDefaultSettings"></param>
        /// <param name="userBusinessSettings"></param>
        public ExternalProviderUserService(ILogger<ExternalProviderUserService> logger, IOptions<ExternalUserDefaultSettings> externalUserDefaultSettings, IOptions<UserBusinessSettings> userBusinessSettings)
        {
            _logger = logger;
            _externalUserDefaultSettings = externalUserDefaultSettings.Value;
            _userBusinessSettings = userBusinessSettings.Value;

        }
        /// <summary>
        /// method AddUserToExternalProvider
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public async Task<FisUserCreationAugmentedResult> AddUserToExternalProvider(CreateUserCommandRequestModel model)
        {
            

            var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();
            var getDepartmentDetails = GetDepartment(ref fisUserCreationAugmentedResult, model.FirmName);
            var getUserProfileDetails = GetUserProfile(ref fisUserCreationAugmentedResult, model.FirmName);
            var getFisIdpUserModel = GetFisIdpUserModel(model, model.FirmName, getDepartmentDetails, getUserProfileDetails);
            var httpWebRequest = (HttpWebRequest)WebRequest.Create(_userBusinessSettings.FisIdpUrlForUser);

            httpWebRequest.ContentType = "application/json";
            httpWebRequest.Method = "POST";
            httpWebRequest.Headers.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
            httpWebRequest.Headers.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
            httpWebRequest.Headers.Add("Accept", "application/json");
            httpWebRequest.Headers.Add("selected-firm-name", model.FirmName);

            try
            {
                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    string json = JsonConvert.SerializeObject(getFisIdpUserModel, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
                    streamWriter.Write(json);
                }

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    var result = streamReader.ReadToEnd();
                    var fisIdpUser = JsonConvert.DeserializeObject<FisIdpUserModel>(result);
                    fisUserCreationAugmentedResult.ExternalUserId = fisIdpUser.Id;
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                    _logger.LogInformation($"User Created in FIS IDP for username {model.UserName} with external user id {fisIdpUser.Id}");
                }
            }
            catch (WebException ex)
            {
                var response = (HttpWebResponse)ex.Response;

                _logger.LogError("Error occurred while creating a user in external provider." + ex.Message );

                try
                {
                    var webResponse = (HttpWebResponse)ex.Response;
                    var content = webResponse.GetResponseStream();
                    var encode = System.Text.Encoding.GetEncoding("utf-8");
                    StreamReader readStream = new StreamReader(content, encode);
                    String str = readStream.ReadToEnd();
                    var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                    _logger.LogError("Logging error string received from fis IDP" + str);

                    var userAlreadyExists = false;
                    errLogs.Messages.ForEach(valitionResponseItem =>
                    {
                        if (valitionResponseItem.Message.Contains(_userBusinessSettings.UserAlreadyExistValidationMessageString))
                        {
                            userAlreadyExists = true;
                        }
                    });

                    if (userAlreadyExists)
                    {
                        var fisIdpUser = GetFisIdpUserByName(model.UserName, model.FirmName);
                        _logger.LogInformation($"User already exists in FIS IDP for username {model.UserName} with external user id {fisIdpUser.Id}");
                        _logger.LogInformation("Validating the FIS IDP user against user input data");

                        if (IsFisIdpUserMatchingPanoramaUserData(model.Email.EmailAddress, model.UserName, fisIdpUser))
                        {
                            if (await CheckUserRoleAndProfileOfExistingFisIdpUser(fisIdpUser, model.FirmName))
                            {
                                fisUserCreationAugmentedResult.ExternalUserId = fisIdpUser.Id;
                                fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                            }
                            else
                            {
                                LinkFisIdpUserWithPanorama(fisIdpUser, false, ref fisUserCreationAugmentedResult, model.FirmName, getDepartmentDetails, getUserProfileDetails);
                            }
                        }
                        else
                        {
                            fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                            fisUserCreationAugmentedResult.IsConflict = true;
                            fisUserCreationAugmentedResult.FisIdpUserModel = new UserModel()
                            {
                                FirstName = fisIdpUser.FirstName,
                                LastName = fisIdpUser.LastName,
                                EmailAddress = fisIdpUser.EmailAddress,
                                MiddleName = fisIdpUser.MiddleName,
                                UserId = fisIdpUser.LoginName
                            };
                        }
                    }
                    else
                    {
                        fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                        fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                    }
                }
                catch (Exception exception)
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while creating a user in external provider. " + ex?.Message;
                    _logger.LogError("Error occurred while creating a user in external provider." + ex?.Message);
                    _logger.LogError("Error occurred while creating a user in external provider." + exception?.Message);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Error occurred while creating a user in external provider " + ex.Message);
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while creating a user in external provider.";
            }

            return fisUserCreationAugmentedResult;
        }

        /// <summary>
        /// Method used to delete User from IDP
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="firmName"></param>
        /// <returns></returns>
        public FisUserCreationAugmentedResult DeleteUserFromExternalProvider(int userId, string firmName)
        {
            _logger.LogInformation($"deleting user in external provider with user id {userId}");

            var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();

            if (userId != 0)
            {
                var httpWebRequest = (HttpWebRequest)WebRequest.Create(_userBusinessSettings.FisIdpUrlForUser + "/batch/permanent/?id=" + userId);
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "DELETE";
                httpWebRequest.Headers.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
                httpWebRequest.Headers.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
                httpWebRequest.Headers.Add("Accept", "application/json");
                httpWebRequest.Headers.Add("selected-firm-name", firmName);

                try
                {
                    var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();

                    if (httpResponse.StatusCode == HttpStatusCode.OK)
                    {
                        fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;

                        _logger.LogInformation($"User deleted in FIS IDP for external user id: {userId}");
                    }
                }
                catch (WebException ex)
                {
                    var response = (HttpWebResponse)ex.Response;

                    _logger.LogInformation("Error occurred while deleting a user in external provider." + ex.Message);

                    try
                    {
                        var webResponse = ((HttpWebResponse)ex.Response);
                        var content = webResponse.GetResponseStream();
                        var encode = System.Text.Encoding.GetEncoding("utf-8");
                        StreamReader readStream = new StreamReader(content, encode);
                        String str = readStream.ReadToEnd();
                        var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                        _logger.LogInformation("Logging error string received external provider" + str);

                        fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                        fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                    }
                    catch (Exception exception)
                    {
                        fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                        fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while deleting a user in external provider.";
                        _logger.LogError("Error occurred while deleting a user in external provider." + exception.Message);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError("Error occurred while deleting a user in external provider " + ex.Message);
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while deleting a user in external provider.";
                }
            }
            else
            {
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                fisUserCreationAugmentedResult.ErrorMessage = "Invalid User Id";
            }
            return fisUserCreationAugmentedResult;
        }

        public async Task<FisUserCreationAugmentedResult> UpdateUserFromExternalProvider(UpdateUserCommandRequestModel newUserModel, UserResponseModel oldUserModel, string FirmName)
        {
            _logger.LogInformation($"Updating user in external provider with user id {oldUserModel.ExternalProviderUserId}");

            _logger.LogInformation("----------- UpdateUserFromExternalProviderFirmName is----------------");
            _logger.LogInformation("FirmName is "+ FirmName);
            _logger.LogInformation(FirmName);


            var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();
            var getDepartmentDetails = GetDepartment(ref fisUserCreationAugmentedResult, FirmName);

            _logger.LogInformation("-----------getDepartmentDetails is----------------");
            _logger.LogInformation(JsonConvert.SerializeObject(getDepartmentDetails));


            var getUserProfileDetails = GetUserProfile(ref fisUserCreationAugmentedResult, FirmName);

            _logger.LogInformation("-----------getUserProfileDetails is----------------");
            _logger.LogInformation(JsonConvert.SerializeObject(getUserProfileDetails));

            FisIdpUserModel fisIdpUserModel = null;

            //Fetching User from IDP
            if (oldUserModel.ExternalProviderUserId > 0)
            {
                _logger.LogInformation($"fetching user details from FIS IDP for username {oldUserModel.UserName}");
                fisIdpUserModel = GetFisIdpUserByExternalId(Convert.ToInt32(oldUserModel.ExternalProviderUserId), ref fisUserCreationAugmentedResult, FirmName);
            }
            else
            {
                _logger.LogInformation($"fetching user details from FIS IDP for username {oldUserModel.UserName}");
                fisIdpUserModel = GetFisIdpUserByName(oldUserModel.UserName, FirmName);
            }

            _logger.LogInformation("Validating the FIS IDP response for user get.");
            //Validating Error while fetching user
            if (String.IsNullOrEmpty(fisIdpUserModel?.LoginName))
            {
                if (fisUserCreationAugmentedResult.ResponseType == ResponseType.ExceptionError)
                {
                    return fisUserCreationAugmentedResult;
                }
                if (fisUserCreationAugmentedResult.ResponseType == ResponseType.ValidationError)
                {
                    return fisUserCreationAugmentedResult;
                }
                if (fisUserCreationAugmentedResult.ResponseType == ResponseType.NotFound)
                {
                    return fisUserCreationAugmentedResult;
                }
            }

            _logger.LogInformation("Validating the FIS IDP user against panorama old user data");
            //validate fis idp user data with old panorama user data
            if (!IsFisIdpUserMatchingPanoramaUserData(oldUserModel.Email.EmailAddress, oldUserModel.UserName, fisIdpUserModel) || fisIdpUserModel.LoginName.ToLower() != oldUserModel.UserName.ToLower())
            {
                if (!IsFisIdpUserMatchingPanoramaUserData(newUserModel.Email.EmailAddress, oldUserModel.UserName, fisIdpUserModel))
                {
                    //If user details don't match
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                    fisUserCreationAugmentedResult.IsConflict = true;
                    fisUserCreationAugmentedResult.FisIdpUserModel = new UserModel()
                    {
                        FirstName = fisIdpUserModel.FirstName,
                        LastName = fisIdpUserModel.LastName,
                        EmailAddress = fisIdpUserModel.EmailAddress,
                        MiddleName = fisIdpUserModel.MiddleName,
                        UserId = fisIdpUserModel.LoginName
                    };

                    return fisUserCreationAugmentedResult;
                }
            }

            if (oldUserModel.ExternalProviderUserId != 0)
            {

                fisIdpUserModel.LoginName = oldUserModel.UserName;
                fisIdpUserModel.FirstName = newUserModel.UserDetail.FirstName;
                fisIdpUserModel.MiddleName = newUserModel.UserDetail.MiddleName;
                fisIdpUserModel.LastName = newUserModel.UserDetail.LastName;
                fisIdpUserModel.EmailAddress = newUserModel.Email.EmailAddress;

                if (!await CheckUserRoleAndProfileOfExistingFisIdpUser(fisIdpUserModel, FirmName))
                {
                    _logger.LogInformation("----------- before AddPanoramaUserRoleAndProfile  is----------------");
                    _logger.LogInformation("FirmName is " + FirmName);
                    AddPanoramaUserRoleAndProfile(ref fisIdpUserModel, getDepartmentDetails, FirmName, getUserProfileDetails);
                }

                UpdateFisIdpUser(fisIdpUserModel, ref fisUserCreationAugmentedResult, FirmName);
            }
            else
            {
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                fisUserCreationAugmentedResult.ErrorMessage = "Invalid User Id";

            }

            return fisUserCreationAugmentedResult;
        }


        /// <summary>
        /// ChangeUserPasswordExternalProvider: This method is used to change user password in IDP
        /// </summary>
        /// <param name="changeUserPassword"></param>
        /// <param name="firmName"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        public FisUserCreationAugmentedResult ChangeUserPasswordExternalProvider(ChangeUserPassword changeUserPassword, string firmName, long userId)
        {
            var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();

            var httpWebRequest = (HttpWebRequest)WebRequest.Create($"{_userBusinessSettings.FisIdpUrlForUser}reset-pwd/{userId}");
            httpWebRequest.ContentType = "application/json";
            httpWebRequest.Method = "PUT";
            httpWebRequest.Headers.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
            httpWebRequest.Headers.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
            httpWebRequest.Headers.Add("Accept", "application/json");
            httpWebRequest.Headers.Add("selected-firm-name", firmName);
            try
            {
                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    string json = JsonConvert.SerializeObject(changeUserPassword, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
                    streamWriter.Write(json);
                }

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();

                if (httpResponse.StatusCode == HttpStatusCode.OK)
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;

                    _logger.LogInformation($"User password changed in FIS IDP for user id: {userId}");
                }
            }
            catch (WebException ex)
            {
                var response = (HttpWebResponse)ex.Response;

                _logger.LogError("Error occurred while changing a user password in external provider." + ex.Message);

                try
                {
                    var webResponse = ((HttpWebResponse)ex.Response);
                    var content = webResponse.GetResponseStream();
                    var encode = System.Text.Encoding.GetEncoding("utf-8");
                    StreamReader readStream = new StreamReader(content, encode);
                    String str = readStream.ReadToEnd();
                    var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                    _logger.LogError("Logging error string received external provider" + str);

                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                    fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                }
                catch (Exception exception)
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while changing user password in external provider.";
                    _logger.LogError("Error occurred while changing user password in external provider." + exception.Message);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Error occurred while changing user password in external provider " + ex.Message);
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while changing user password in external provider.";
            }


            return fisUserCreationAugmentedResult;
        }

        /// <summary>
        /// This method is used to fetch the userDetail from IDP
        /// </summary>
        /// <param name="userName"></param>
        /// <param name="firmName"></param>
        /// <returns></returns>
        public FisIdpUserDetails GetUserDetails(string userName, string firmName)
        {
            var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();

            var result = GetFisIdpUserDetailByName(userName, firmName);

            return result;
        }


        #region Private Methods

        private FisIdpUserModel GetFisIdpUserModel(CreateUserCommandRequestModel user, string firmName, FisIdpDepartmentDetails departmentDetails, FisIdpUserProfileDetails userProfileDetails)
        {
            var fisUserModel = new FisIdpUserModel(this._externalUserDefaultSettings,firmName, departmentDetails, userProfileDetails);
            fisUserModel.LoginName = user.UserName;
            fisUserModel.FirstName = user.UserDetail.FirstName;
            fisUserModel.MiddleName = user.UserDetail.MiddleName;
            fisUserModel.LastName = user.UserDetail.LastName;
            fisUserModel.EmailAddress = user.Email.EmailAddress;
            fisUserModel.AccountLockViolation = true;
            fisUserModel.PasswordViolation = true;
            fisUserModel.ForcePasswordChange = user.ForceChange != null ? Convert.ToBoolean(user.ForceChange) : _externalUserDefaultSettings.ForcePasswordChange;

            return fisUserModel;
        }

        private FisIdpUserModel GetUserInformationFromIdp(string userName, string FirmName)
        {
            FisIdpUserModel fisIdpUserModel = null;
            try
            {
                using (var client = new HttpClient())
                {
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
                    client.DefaultRequestHeaders.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
                    client.DefaultRequestHeaders.Add("Accept", "application/json");
                    client.DefaultRequestHeaders.Add("selected-firm-name", FirmName);

                    var webRequest = new HttpRequestMessage(HttpMethod.Get, _userBusinessSettings.FisIdpUrlForUser + "?crit=loginName+eq+" + userName)
                    {
                        Content = new StringContent("", Encoding.UTF8, "application/json")
                    };

                    var response = client.Send(webRequest);

                    using var reader = new StreamReader(response.Content.ReadAsStream());


                    if (response.IsSuccessStatusCode)
                    {
                        var abc = reader.ReadToEnd();
                        fisIdpUserModel = JsonConvert.DeserializeObject<FisIdpUserModel>(abc, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });

                    }
                }
            }
            catch(Exception)
            {
                //_logger.LogError($"Error occurred while getting a user from external provider {userName}"+ ex.Message);
                throw ;
            }
            return fisIdpUserModel;
        }

        private FisIdpUserDetails GetUserDetailInformationFromIdp(string userName, string FirmName)
        {
            FisIdpUserDetails fisIdpUserModel = null;
            try
            {
                using (var client = new HttpClient())
                {
                    client.DefaultRequestHeaders.Accept.Clear();
                    client.DefaultRequestHeaders.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
                    client.DefaultRequestHeaders.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
                    client.DefaultRequestHeaders.Add("Accept", "application/json");
                    client.DefaultRequestHeaders.Add("selected-firm-name", FirmName);

                    var webRequest = new HttpRequestMessage(HttpMethod.Get, _userBusinessSettings.FisIdpUrlForUser + "?crit=loginName+eq+" + userName)
                    {
                        Content = new StringContent("", Encoding.UTF8, "application/json")
                    };

                    var response = client.Send(webRequest);

                    using var reader = new StreamReader(response.Content.ReadAsStream());


                    if (response.IsSuccessStatusCode)
                    {
                        var abc = reader.ReadToEnd();
                        fisIdpUserModel = JsonConvert.DeserializeObject<FisIdpUserDetails>(abc, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
                    }
                }
            }
            catch (Exception)
            {
                //_logger.LogError($"Error occurred while getting a user from external provider {userName}"+ ex.Message);
                throw;
            }
            return fisIdpUserModel;
        }

        private  FisIdpUserModel GetFisIdpUserByName(string userName, string FirmName)
        {
            
            FisIdpUserModel fisIdpUserModel = null;

            if (!String.IsNullOrEmpty(userName))
            {
                fisIdpUserModel = GetUserInformationFromIdp(userName, FirmName);
            }

            return fisIdpUserModel;
        }

        private FisIdpUserDetails GetFisIdpUserDetailByName(string userName, string FirmName)
        {

            FisIdpUserDetails fisIdpUserModel = null;

            if (!String.IsNullOrEmpty(userName))
            {
                fisIdpUserModel = GetUserDetailInformationFromIdp(userName, FirmName);
            }

            return fisIdpUserModel;
        }

        private bool IsFisIdpUserMatchingPanoramaUserData(string emailAddress, string userName, FisIdpUserModel fisIdpUserModel)
        {
            //var middleNameFromPanorama = String.IsNullOrEmpty(userModel.MiddleName) ? null : userModel.MiddleName.ToLower();
            //var middleNameFromFis = String.IsNullOrEmpty(fisIdpUserModel.MiddleName) ? null : fisIdpUserModel.MiddleName.ToLower();

            //if (userModel.FirstName.ToLower() == fisIdpUserModel.FirstName.ToLower()
            //    && userModel.LastName.ToLower() == fisIdpUserModel.LastName.ToLower()
            //    && userModel.EmailAddress.ToLower() == fisIdpUserModel.EmailAddress.ToLower()
            //    && middleNameFromPanorama == middleNameFromFis)
            //{
            //    return true;
            //}

            if (emailAddress.ToLower() == fisIdpUserModel.EmailAddress.ToLower() &&
                userName.ToLower() == fisIdpUserModel.LoginName.ToLower())
            {
                return true;
            }
            return false;
        }

        private async  Task<bool> CheckUserRoleAndProfileOfExistingFisIdpUser(FisIdpUserModel fisIdpUserModel, string FirmName)
        {
            if (fisIdpUserModel.LoginRole == _externalUserDefaultSettings.LoginRoleForRegularUser)
            {
                if (!fisIdpUserModel.UserProfile.Contains(_externalUserDefaultSettings.UserProfileForRegularUser))
                {
                    return false;
                }
                if (!fisIdpUserModel.Departments.Any(x => x.DepartmentName.Contains(_externalUserDefaultSettings.DepartmentName)))
                {
                    return false;
                }
                if (!fisIdpUserModel.ProfileRegToLogins.Any(x => x.ProfileRegistryName.Contains(_externalUserDefaultSettings.ProfileRegToLoginsForRegularUser.ProfileRegistryName.Replace("{{FirmName}}", FirmName))))
                {
                    return false;
                }

            }
            else if (fisIdpUserModel.LoginRole == _externalUserDefaultSettings.LoginRoleForAdminUser)
            {
                if (!fisIdpUserModel.UserProfile.Contains(_externalUserDefaultSettings.UserProfileForAdminUser))
                {
                    return false;
                }
                if (!fisIdpUserModel.Departments.Any(x => x.DepartmentName.Contains(_externalUserDefaultSettings.DepartmentName)))
                {
                    return false;
                }
                if (!fisIdpUserModel.ProfileRegToLogins.Any(x => x.ProfileRegistryName.Contains(_externalUserDefaultSettings.ProfileRegToLoginsForAdminUser.ProfileRegistryName.Replace("{{FirmName}}", FirmName))))
                {
                    return false;
                }
            }

            return await Task.FromResult(true);
        }

        private FisUserCreationAugmentedResult LinkFisIdpUserWithPanorama(FisIdpUserModel userModel, bool updateFisIdpMetaDataDetails, ref FisUserCreationAugmentedResult fisUserCreationAugmentedResult, string FirmName, FisIdpDepartmentDetails DepartmentDetails, FisIdpUserProfileDetails UserProfileDetails)
        {
            
            try
            {
                AddPanoramaUserRoleAndProfile(ref userModel, DepartmentDetails, FirmName, UserProfileDetails);

                UpdateFisIdpUser(userModel, ref fisUserCreationAugmentedResult, FirmName);
            }
            catch (Exception ex)
            {
                //_logger.LogError($"Error occurred while linking a user to external provider:{userModel.LoginName} " + ex.Message);
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while linking a user to external provider: " + ex.Message;
            }

            return fisUserCreationAugmentedResult;
        }

        private void AddPanoramaUserRoleAndProfile(ref FisIdpUserModel fisIdpUserModel, FisIdpDepartmentDetails DepartmentDetails, string FirmName, FisIdpUserProfileDetails UserProfileDetails)
        {
            
            if (fisIdpUserModel.ProfileRegToLogins == null)
                fisIdpUserModel.ProfileRegToLogins = new List<FisIdpProfileRegToLogin>();

            if (fisIdpUserModel.Departments == null)
                fisIdpUserModel.Departments = new List<FisIdpDepartment>();

            if (fisIdpUserModel.LoginRole == _externalUserDefaultSettings.LoginRoleForRegularUser)
            {
                if (!fisIdpUserModel.UserProfile.Contains(_externalUserDefaultSettings.UserProfileForRegularUser))
                {
                    if (!String.IsNullOrEmpty(fisIdpUserModel.UserProfile))
                    {
                        fisIdpUserModel.UserProfile = fisIdpUserModel.UserProfile + ", " + _externalUserDefaultSettings.UserProfileForRegularUser;
                    }
                    else
                    {
                        fisIdpUserModel.UserProfile = _externalUserDefaultSettings.UserProfileForRegularUser;
                    }
                }
                if (!fisIdpUserModel.Departments.Any(x => x.DepartmentName.Contains(_externalUserDefaultSettings.DepartmentName)))
                {
                    //if (fisIdpUserModel.Departments.Count >= 1)
                    //{
                        var _dep = new FisIdpDepartment(_externalUserDefaultSettings.Departments.DepartmentName, DepartmentDetails);
                       // _dep.PrimaryDept = 0;
                        fisIdpUserModel.Departments.Add(_dep);
                    //}
                    //else
                    //{
                    //    var _dep = new FisIdpDepartment(_externalUserDefaultSettings.Departments.DepartmentName, DepartmentDetails);
                    //    fisIdpUserModel.Departments.Add(_dep);
                    //}
                }

                _logger.LogInformation("-----------AddPanoramaUserRoleAndProfile FirmName is----------------");
                _logger.LogInformation("FirmName is {0}", FirmName);

                _logger.LogInformation("-----------AddPanoramaUserRoleAndProfile FirmName  is----------------");
                _logger.LogInformation("FirmName is {0}", FirmName);

                _logger.LogInformation("-----------AddPanoramaUserRoleAndProfile UserProfileDetails  is----------------");
                _logger.LogInformation(JsonConvert.SerializeObject(UserProfileDetails));

                if (!fisIdpUserModel.ProfileRegToLogins.Any(x => x.ProfileRegistryName.Contains(_externalUserDefaultSettings.ProfileRegToLoginsForRegularUser.ProfileRegistryName.Replace("{{FirmName}}", FirmName))))
                {
                    if (fisIdpUserModel.ProfileRegToLogins.Count >= 1)
                    {

                        _logger.LogInformation("-----------_externalUserDefaultSettings 1 is----------------");
                        _logger.LogInformation(JsonConvert.SerializeObject(_externalUserDefaultSettings));

                        _logger.LogInformation("block 1");
                        _logger.LogInformation("ProfileRegToLoginsForRegularUser one value " + _externalUserDefaultSettings.ProfileRegToLoginsForRegularUser.ProfileRegistryName);
                        var _profileRegToLogins = new FisIdpProfileRegToLogin(_externalUserDefaultSettings.ProfileRegToLoginsForRegularUser.ProfileRegistryName.Replace("{{FirmName}}", FirmName), UserProfileDetails);
                        fisIdpUserModel.ProfileRegToLogins.Add(_profileRegToLogins);
                    }
                    else
                    {
                        var _profileRegToLogins = new FisIdpProfileRegToLogin(_externalUserDefaultSettings.ProfileRegToLoginsForRegularUser.ProfileRegistryName.Replace("{{FirmName}}", FirmName), UserProfileDetails);
                        fisIdpUserModel.ProfileRegToLogins.Add(_profileRegToLogins);
                    }

                }

            }
            else if (fisIdpUserModel.LoginRole == _externalUserDefaultSettings.LoginRoleForAdminUser)
            {
                if (!fisIdpUserModel.UserProfile.Contains(_externalUserDefaultSettings.UserProfileForAdminUser))
                {
                    if (!String.IsNullOrEmpty(fisIdpUserModel.UserProfile))
                    {
                        fisIdpUserModel.UserProfile = fisIdpUserModel.UserProfile + ", " + _externalUserDefaultSettings.UserProfileForAdminUser;
                    }
                    else
                    {
                        fisIdpUserModel.UserProfile = _externalUserDefaultSettings.UserProfileForAdminUser;
                    }
                }
                if (!fisIdpUserModel.Departments.Any(x => x.DepartmentName.Contains(_externalUserDefaultSettings.DepartmentName)))
                {
                    //if (fisIdpUserModel.Departments.Count >= 1)
                    //{
                        var _dep = new FisIdpDepartment(_externalUserDefaultSettings.Departments.DepartmentName, DepartmentDetails);
                        //_dep.PrimaryDept = 0;
                        fisIdpUserModel.Departments.Add(_dep);
                    //}
                    //else
                    //{
                    //    var _dep = new FisIdpDepartment(_externalUserDefaultSettings.Departments.DepartmentName, DepartmentDetails);
                    //    fisIdpUserModel.Departments.Add(_dep);
                    //}
                }
                if (!fisIdpUserModel.ProfileRegToLogins.Any(x => x.ProfileRegistryName.Contains(_externalUserDefaultSettings.ProfileRegToLoginsForAdminUser.ProfileRegistryName.Replace("{{FirmName}}", FirmName))))
                {
                    if (fisIdpUserModel.ProfileRegToLogins.Count >= 1)
                    {

                        _logger.LogInformation("-----------_externalUserDefaultSettings 2 is----------------");
                        _logger.LogInformation(JsonConvert.SerializeObject(_externalUserDefaultSettings));

                        _logger.LogInformation("block 2");
                        _logger.LogInformation("ProfileRegToLoginsForRegularUser two value "+_externalUserDefaultSettings.ProfileRegToLoginsForRegularUser.ProfileRegistryName);
                        var _profileRegToLogins = new FisIdpProfileRegToLogin(_externalUserDefaultSettings.ProfileRegToLoginsForRegularUser.ProfileRegistryName.Replace("{{FirmName}}", FirmName), UserProfileDetails);
                        fisIdpUserModel.ProfileRegToLogins.Add(_profileRegToLogins);
                    }
                    else
                    {
                        var _profileRegToLogins = new FisIdpProfileRegToLogin(_externalUserDefaultSettings.ProfileRegToLoginsForRegularUser.ProfileRegistryName.Replace("{{FirmName}}", FirmName), UserProfileDetails);
                        fisIdpUserModel.ProfileRegToLogins.Add(_profileRegToLogins);
                    }
                }
            }
        }

        private void UpdateFisIdpUser(FisIdpUserModel userModel, ref FisUserCreationAugmentedResult fisUserCreationAugmentedResult, string FirmName)
        {
            userModel.Password = null;
            userModel.ForcePasswordChange = false;
            userModel.AutoGeneratePassword = false;
            userModel.SendEmailNotification = false;
            userModel.SendPasswordEmailNotification = false;


            var httpWebRequest = (HttpWebRequest)WebRequest.Create(_userBusinessSettings.FisIdpUrlForUser + "/" + userModel.Id);
            httpWebRequest.ContentType = "application/json";
            httpWebRequest.Method = "PUT";
            httpWebRequest.Headers.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
            httpWebRequest.Headers.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
            httpWebRequest.Headers.Add("Accept", "application/json");
            httpWebRequest.Headers.Add("selected-firm-name", FirmName);
            try
            {
                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    string json = JsonConvert.SerializeObject(userModel, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
                    streamWriter.Write(json);
                }

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    var result = streamReader.ReadToEnd();
                    var fidIdpUser = JsonConvert.DeserializeObject<FisIdpUserModel>(result);
                    fisUserCreationAugmentedResult.ExternalUserId = fidIdpUser.Id;
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                }
            }
            catch (WebException ex)
            {
                var response = (HttpWebResponse)ex.Response;

                _logger.LogError("Error occurred while Updating a user in external provider." + ex.Message);

                try
                {
                    var webResponse = ((HttpWebResponse)ex.Response);
                    var content = webResponse.GetResponseStream();
                    var encode = System.Text.Encoding.GetEncoding("utf-8");
                    StreamReader readStream = new StreamReader(content, encode);
                    String str = readStream.ReadToEnd();
                    var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                    _logger.LogError("Logging error string received external provider" + str);

                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                    fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                }
                catch (Exception exception)
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while updating a user in external provider.";
                    _logger.LogError("Error occurred while updating a user in external provider." + exception.Message);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Error occurred while updating a user in external provider " + ex.Message);
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while updating a user in external provider.";
            }
        }

        private FisIdpUserModel GetFisIdpUserByExternalId(int externalUserId, ref FisUserCreationAugmentedResult fisUserCreationAugmentedResult, string FirmName)
        {
            _logger.LogInformation($"getting user from external provider with user id {externalUserId}");
            FisIdpUserModel fisIdpUserModel = null;

            if (externalUserId != 0)
            {

                var httpWebRequest = (HttpWebRequest)WebRequest.Create(_userBusinessSettings.FisIdpUrlForUser + "/" + externalUserId);
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "Get";
                httpWebRequest.Headers.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
                httpWebRequest.Headers.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
                httpWebRequest.Headers.Add("Accept", "application/json");
                httpWebRequest.Headers.Add("selected-firm-name", FirmName);
                try
                {
                    var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                    using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                    {
                        var result = streamReader.ReadToEnd();
                        var arrayList = JObject.Parse(result).ToObject<FisIdpUserModel>();
                        if (arrayList?.LoginName == null)
                        {
                            fisUserCreationAugmentedResult.ErrorMessage = "User not found in external authentication system";
                            fisUserCreationAugmentedResult.ResponseType = ResponseType.NotFound;
                        }

                        fisIdpUserModel = arrayList;
                    }
                    return fisIdpUserModel;
                }
                catch (WebException ex)
                {
                    var response = (HttpWebResponse)ex.Response;

                    _logger.LogError("Error occurred while Updating a user in external provider." + ex.Message);

                    try
                    {
                        var webResponse = (HttpWebResponse)ex.Response;
                        var content = webResponse.GetResponseStream();
                        var encode = System.Text.Encoding.GetEncoding("utf-8");
                        StreamReader readStream = new StreamReader(content, encode);
                        String str = readStream.ReadToEnd();
                        var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                        _logger.LogError("Logging error string received external provider" + str);

                        if (str.Contains("record not found"))
                        {
                            fisUserCreationAugmentedResult.ResponseType = ResponseType.NotFound;
                            fisUserCreationAugmentedResult.ErrorMessage = "User not found in external authentication system";
                        }
                    }
                    catch (Exception exception)
                    {
                        fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                        fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while fetching user from external provider.";
                        _logger.LogError("Error occurred while fetching user from external provider." + exception.Message);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError("Error occurred while fetching user from external provider " + ex.Message);
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while fetching user from external provider.";
                }
            }

            return fisIdpUserModel;
        }

        /// <summary>
        /// Method is used to update user Status active and Deactivate
        /// </summary>
        /// <param name="requestModel"></param>
        /// <param name="firmName"></param>
        /// <returns></returns>
        public FisUserCreationAugmentedResult ActivateDeactivateUser(ActivateUserRequestModel requestModel, string firmName)
        {
            _logger.LogInformation($"User Activate/Deactivate Initiated for External UserId {requestModel.ExternalUserId}");

            var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();

            var status = requestModel.Status ? 1 : 0;

            _logger.LogInformation($"User status is {status} for External UserId {requestModel.ExternalUserId}");

            var httpWebRequest = (HttpWebRequest)WebRequest.Create($"{_userBusinessSettings.FisIdpUrlForUser}activate/{requestModel.ExternalUserId}?status={status}");
            httpWebRequest.ContentType = "application/json";
            httpWebRequest.Method = "PUT";
            httpWebRequest.Headers.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
            httpWebRequest.Headers.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
            httpWebRequest.Headers.Add("Accept", "application/json");
            httpWebRequest.Headers.Add("selected-firm-name", firmName);
            try
            {
                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    string json = JsonConvert.SerializeObject(requestModel, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
                    streamWriter.Write(json);
                }

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();

                if (httpResponse.StatusCode == HttpStatusCode.OK)
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;

                    _logger.LogInformation($"User activated/deactivated in External portal for UserId : {requestModel.ExternalUserId}");
                }
            }
            catch (WebException ex)
            {
                var response = (HttpWebResponse)ex.Response;

                _logger.LogError("Error occurred while activated/deactivated user in external provider." + ex.Message);

                try
                {
                    var webResponse = ((HttpWebResponse)ex.Response);
                    var content = webResponse.GetResponseStream();
                    var encode = System.Text.Encoding.GetEncoding("utf-8");
                    StreamReader readStream = new StreamReader(content, encode);
                    String str = readStream.ReadToEnd();
                    var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                    _logger.LogError("Logging error string received external provider" + str);

                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                    fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                }
                catch (Exception exception)
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while activated/deactivated user in external provider.";
                    _logger.LogError("Error occurred while activated/deactivated user in external provider." + exception.Message);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Error occurred while activated/deactivated user in external provider " + ex.Message);
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while cactivated/deactivated user in external provider.";
            }

            return fisUserCreationAugmentedResult;
        }

        /// <summary>
        /// Method is used to suspend/resumed User
        /// </summary>
        /// <param name="requestModel"></param>
        /// <param name="firmName"></param>
        /// <returns></returns>
        public FisUserCreationAugmentedResult SuspendUser(SuspendUserRequestModel requestModel, string firmName)
        {
            _logger.LogInformation($"User suspend/resumed Initiated for External UserId {requestModel.ExternalUserId}");

            var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();

            var status = requestModel.Status ? 1 : 0;

            _logger.LogInformation($"User status is {status} for External UserId {requestModel.ExternalUserId}");

            var httpWebRequest = (HttpWebRequest)WebRequest.Create($"{_userBusinessSettings.FisIdpUrlForUser}suspend/{requestModel.ExternalUserId}?status={status}");
            httpWebRequest.ContentType = "application/json";
            httpWebRequest.Method = "PUT";
            httpWebRequest.Headers.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
            httpWebRequest.Headers.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
            httpWebRequest.Headers.Add("Accept", "application/json");
            httpWebRequest.Headers.Add("selected-firm-name", firmName);
            try
            {
                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    string json = JsonConvert.SerializeObject(requestModel, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
                    streamWriter.Write(json);
                }

                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();

                if (httpResponse.StatusCode == HttpStatusCode.OK)
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;

                    _logger.LogInformation($"User suspend/resumed in External portal for UserId : {requestModel.ExternalUserId}");
                }
            }
            catch (WebException ex)
            {
                var response = (HttpWebResponse)ex.Response;

                _logger.LogError("Error occurred while suspend/resumed user in external provider." + ex.Message);

                try
                {
                    var webResponse = ((HttpWebResponse)ex.Response);
                    var content = webResponse.GetResponseStream();
                    var encode = System.Text.Encoding.GetEncoding("utf-8");
                    StreamReader readStream = new StreamReader(content, encode);
                    String str = readStream.ReadToEnd();
                    var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                    _logger.LogError("Logging error string received external provider" + str);

                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                    fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                }
                catch (Exception exception)
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while activated/deactivated user in external provider.";
                    _logger.LogError("Error occurred while suspend/resumed user in external provider." + exception.Message);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("Error occurred while suspend/resumed user in external provider " + ex.Message);
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while cactivated/deactivated user in external provider.";
            }

            return fisUserCreationAugmentedResult;
        }

        /// <summary>
        /// Get departments from IDP for te given firm
        /// </summary>
        /// <param name="fisUserCreationAugmentedResult"></param>
        /// <param name="firmName"></param>
        /// <returns></returns>
        public FisIdpDepartmentDetails GetDepartment(ref FisUserCreationAugmentedResult fisUserCreationAugmentedResult, string firmName)
        {
            _logger.LogInformation($"getting department from external provider");
            FisIdpDepartmentDetails fisIdpDepartmentModel = null;
            if (!string.IsNullOrEmpty(firmName))
            {

                var httpWebRequest = (HttpWebRequest)WebRequest.Create(_userBusinessSettings.FisIdpDepartmentUrl);
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "Get";
                httpWebRequest.Headers.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
                httpWebRequest.Headers.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
                httpWebRequest.Headers.Add("Accept", "application/json");
                httpWebRequest.Headers.Add("selected-firm-name", firmName);
                try
                {
                    var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                    using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                    {
                        var result = streamReader.ReadToEnd();
                        var arrayList = JObject.Parse(result).ToObject<FisIdpDepartmentDetails>();
                        if (arrayList.data == null)
                        {
                            fisUserCreationAugmentedResult.ErrorMessage = "Department not found in external authentication system";
                            fisUserCreationAugmentedResult.ResponseType = ResponseType.NotFound;
                        }

                        fisIdpDepartmentModel = arrayList;
                    }
                    return fisIdpDepartmentModel;
                }
                catch (WebException ex)
                {
                    var response = (HttpWebResponse)ex.Response;

                    _logger.LogError("Error occurred while finding a department in external provider." + ex.Message);

                    try
                    {
                        var webResponse = (HttpWebResponse)ex.Response;
                        var content = webResponse.GetResponseStream();
                        var encode = System.Text.Encoding.GetEncoding("utf-8");
                        StreamReader readStream = new StreamReader(content, encode);
                        String str = readStream.ReadToEnd();
                        var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                        _logger.LogError("Logging error string received external provider" + str);

                        if (str.Contains("record not found"))
                        {
                            fisUserCreationAugmentedResult.ResponseType = ResponseType.NotFound;
                            fisUserCreationAugmentedResult.ErrorMessage = "No Department found in external authentication system";
                        }
                    }
                    catch (Exception exception)
                    {
                        fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                        fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while fetching department from external provider.";
                        _logger.LogError("Error occurred while fetching department from external provider." + exception.Message);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError("Error occurred while fetching department from external provider " + ex.Message);
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while fetching department from external provider.";
                }
            }
            return fisIdpDepartmentModel;
        }

        /// <summary>
        /// get User profiles of the firm
        /// </summary>
        /// <param name="fisUserCreationAugmentedResult"></param>
        /// <param name="firmName"></param>
        /// <returns></returns>
        public FisIdpUserProfileDetails GetUserProfile(ref FisUserCreationAugmentedResult fisUserCreationAugmentedResult, string firmName)
        {
            _logger.LogInformation($"getting UserProfile from external provider");
            FisIdpUserProfileDetails fisIdpUserProfileModel = null;
            if (!string.IsNullOrEmpty(firmName))
            {

                var httpWebRequest = (HttpWebRequest)WebRequest.Create(_userBusinessSettings.FisIdpUserProfileUrl);
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "Get";
                httpWebRequest.Headers.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
                httpWebRequest.Headers.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
                httpWebRequest.Headers.Add("Accept", "application/json");
                httpWebRequest.Headers.Add("selected-firm-name", firmName);
                try
                {
                    var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                    using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                    {
                        var result = streamReader.ReadToEnd();
                        var arrayList = JObject.Parse(result).ToObject<FisIdpUserProfileDetails>();
                        if (arrayList.data == null)
                        {
                            fisUserCreationAugmentedResult.ErrorMessage = "No UserProfile  found in external authentication system";
                            fisUserCreationAugmentedResult.ResponseType = ResponseType.NotFound;
                        }

                        fisIdpUserProfileModel = arrayList;
                    }
                    return fisIdpUserProfileModel;
                }
                catch (WebException ex)
                {
                    var response = (HttpWebResponse)ex.Response;

                    _logger.LogError("Error occurred while finding a UserProfile in external provider." + ex.Message);

                    try
                    {
                        var webResponse = (HttpWebResponse)ex.Response;
                        var content = webResponse.GetResponseStream();
                        var encode = System.Text.Encoding.GetEncoding("utf-8");
                        StreamReader readStream = new StreamReader(content, encode);
                        String str = readStream.ReadToEnd();
                        var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                        _logger.LogError("Logging error string received external provider" + str);

                        if (str.Contains("record not found"))
                        {
                            fisUserCreationAugmentedResult.ResponseType = ResponseType.NotFound;
                            fisUserCreationAugmentedResult.ErrorMessage = "UserProfile not found in external authentication system";
                        }
                    }
                    catch (Exception exception)
                    {
                        fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                        fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while fetching UserProfile from external provider.";
                        _logger.LogError("Error occurred while fetching UserProfile from external provider." + exception.Message);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError("Error occurred while fetching UserProfile from external provider " + ex.Message);
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while fetching UserProfile from external provider.";
                }
            }
            return fisIdpUserProfileModel;
        }
        #endregion
    }
}
