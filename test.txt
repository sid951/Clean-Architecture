private async Task UpdateFisIdpUser(FisIdpUserModel userModel, ref FisUserCreationAugmentedResult fisUserCreationAugmentedResult, string FirmName)
{
    userModel.Password = null;
    userModel.ForcePasswordChange = false;
    userModel.AutoGeneratePassword = false;
    userModel.SendEmailNotification = false;
    userModel.SendPasswordEmailNotification = false;

    try
    {
        string url = $"{_userBusinessSettings.FisIdpUrlForUser}/{userModel.Id}";
        var json = JsonConvert.SerializeObject(userModel, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        _httpClient.DefaultRequestHeaders.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
        _httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
        _httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
        _httpClient.DefaultRequestHeaders.Add("selected-firm-name", FirmName);

        var httpResponse = await _httpClient.PutAsync(url, content);
        httpResponse.EnsureSuccessStatusCode();

        var result = await httpResponse.Content.ReadAsStringAsync();
        var fidIdpUser = JsonConvert.DeserializeObject<FisIdpUserModel>(result);
        fisUserCreationAugmentedResult.ExternalUserId = fidIdpUser.Id;
        fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
    }
    catch (HttpRequestException ex)
    {
        _logger.LogError("Error occurred while updating a user in external provider: " + ex.Message);

        try
        {
            var errorResponseContent = await ex.Response.Content.ReadAsStringAsync();
            var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(errorResponseContent);

            _logger.LogError("Logging error string received from external provider: " + errorResponseContent);

            // Handle the error response accordingly
            // ...

            fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
            fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
        }
        catch (Exception exception)
        {
            fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
            fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while updating a user in external provider.";
            _logger.LogError("Error occurred while updating a user in external provider: " + exception.Message);
        }
    }
    catch (Exception ex)
    {
        _logger.LogError("Error occurred while updating a user in external provider: " + ex.Message);
        fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
        fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while updating a user in external provider.";
    }
}
