public FisIdpUserProfileDetails GetUserProfile(ref FisUserCreationAugmentedResult fisUserCreationAugmentedResult, string firmName)
{
    _logger.LogInformation($"getting UserProfile from external provider");
    FisIdpUserProfileDetails fisIdpUserProfileModel = null;
    
    if (string.IsNullOrEmpty(firmName))
    {
        fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
        fisUserCreationAugmentedResult.ErrorMessage = "Invalid firm name";
        return null;
    }

    using (var httpClient = new HttpClient())
    {
        httpClient.DefaultRequestHeaders.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
        httpClient.DefaultRequestHeaders.Add("selected-firm-name", firmName);

        try
        {
            var response = httpClient.GetAsync(_userBusinessSettings.FisIdpUserProfileUrl).Result;

            if (response.IsSuccessStatusCode)
            {
                var result = response.Content.ReadAsStringAsync().Result;
                var arrayList = JsonConvert.DeserializeObject<FisIdpUserProfileDetails>(result);
                if (arrayList.data == null)
                {
                    fisUserCreationAugmentedResult.ErrorMessage = "No UserProfile found in external authentication system";
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.NotFound;
                }

                fisIdpUserProfileModel = arrayList;
            }
            else
            {
                var str = response.Content.ReadAsStringAsync().Result;
                var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(str);

                _logger.LogError("Logging error string received external provider" + str);

                if (str.Contains("record not found"))
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.NotFound;
                    fisUserCreationAugmentedResult.ErrorMessage = "UserProfile not found in external authentication system";
                }
                else
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                    fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("Error occurred while fetching UserProfile from external provider " + ex.Message);
            fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
            fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while fetching UserProfile from external provider.";
        }
    }

    return fisIdpUserProfileModel;
}
