Exception: System.InvalidOperationException
Message: Error during serialization or deserialization using the JSON JavaScriptSerializer. The length of the string exceeds the value set on the maxJsonLength property.

public JsonResult TicketsDetail(string ticketId)
        {
            //var ticketCookie = HttpContext.Request.Cookies["ticketId"];
            //var ticketId = ticketCookie != null ? ticketCookie.Value : string.Empty;

 

            var ticketTypeCookie = HttpContext.Request.Cookies["ticketType"];
            var ticketType = ticketTypeCookie != null ? ticketTypeCookie.Value : string.Empty;

 

            var user = _sessionService.GetCurrentUser();
            bool isEbtUser = user.EmulatedEntity != null ? user.EmulatedEntity.IsEBTUser : user.Contact.Entity.IsEBTUser;
            var username = string.Format("{0} {1}", user.FirstName, user.LastName);
            try
            {
                if (!(isEbtUser))
                {
                    var ticket = string.IsNullOrWhiteSpace(ticketId) ? null : GetNonEBTTicketDetails(ticketId, ticketType);
                    if (ticket != null && ticket.CMSTicketNo != null)
                    {
                        var response = Json(new { isValid = true, detail = ticket }, JsonRequestBehavior.AllowGet);
                        response.MaxJsonLength = int.MaxValue;

 

                        _logger.Info("TicketsController: TicketsDetail method : TicketID: " + ticketId);

 

                        return this.Json(response);
                    }
                    else
                    {
                        _logger.Error(string.Format("{0}:{1} - Requested ticket (id:{2}) is null or not found for user: {3}", "TicketsController", "DetailView", ticketId, username));
                        var response = Json(new { isValid = false, detail = "Request ticket doesn't found" });
                        return this.Json(response);
                    }
                }
                else
                {
                    string errorMessage = string.Empty;

 

                    var ticket = string.IsNullOrWhiteSpace(ticketId) ? null : EBTSnowDetailsUser(ticketId, user);
                    if (ticket == null)
                    {
                        _logger.Error(string.Format("{0}:{1} - Requested ticket (id:{2}) is null for EBT user: {3}", "TicketsController", "DetailView", ticketId));
                        var response = Json(new { isValid = false, detail = "Request ticket doesn't found" });
                        return this.Json(response);
                    }
                    else
                    {
                        if (ticket.EntityId != GetEntityIdForCMS())
                        {
                            _logger.Error(string.Format("{0}:{1} - The ticket's EntityId does not equal the user's entity ID. / User: {2}", "TicketsController", "DetailView"));
                            var response = Json(new { isValid = false, detail = "The ticket's EntityId does not equal the user's entity ID" });
                            return this.Json(response);
                        }

 

                        //  _logger.Error(string.Format("{0}:{1} - Returning EBT Detail View for EBT User: {2}", "TicketsController", "DetailView"));
                        // var ebtTicketViewModel = EBTDetailsUser(user, ticket, ticketId, errorMessage);
                        var response2 = Json(new { isValid = true, detail = ticket });
                        return this.Json(response2);
                    }
                }
            }
            catch (Exception exception)
            {
                _logger.Error(String.Format("Exception :: TicketController  ->  DetailView  ->  Error :: {0}  \n StackTrace {1}", exception.Message, exception.StackTrace));
                var response = Json(new { isValid = false, detail = "Exception :: TicketController  ->  DetailView  ->  Error ::" + exception.Message });
                return this.Json(response);
            }
        }
