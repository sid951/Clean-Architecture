using AutoWrapper.Wrappers;
using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Panorama.Users.API.Handler.CommandHandler
{
    using Microsoft.Extensions.Options;
    using Panorama.Core.Infrastructure.Enums;
    using Panorama.Core.Infrastructure.Services;
    using Panorama.Users.API.Abstractions;
    using Panorama.Users.Domain;
    using Panorama.Users.Domain.RequestModels.CommandRequestModels;
    using Panorama.Users.ExternalProvider.Abstractions;
    using Panorama.Users.ExternalProvider.Models;

    public class ActivateUserCommandHandler : BaseService, IRequestHandler<ActivateUserRequestModel, bool>
    {
        private readonly IExternalProviderUserService _externalProviderUserService;
        private readonly ILogger _logger;
        private readonly IUserRetryService _userRetryService;
        private readonly IUserService _userService;
        private readonly IUserProvidersService _userProvidersService;
        private readonly UserBusinessSettings _userBusinessSettings;

        public ActivateUserCommandHandler(IUserRepository repository, IExternalProviderUserService externalProviderUserService,
            ILogger<UpdateUserCommandHandelr> logger, IUserRetryService userRetryService,
            IUserService userService, IUserProvidersService userProvidersService, IOptions<UserBusinessSettings> userBusinessSettings)
            : base(repository)
        {
            _externalProviderUserService = externalProviderUserService;
            _logger = logger;
            _userRetryService = userRetryService;
            _userService = userService;
            _userProvidersService = userProvidersService;
            _userBusinessSettings = userBusinessSettings.Value;
        }

        public async Task<bool> Handle(ActivateUserRequestModel request, CancellationToken cancellationToken)
        {
            var user = await GetUserAsync(request.UserId);

            await ValidateExternalProviderDetailsAsync(request, user);

            await UpdateUserActivationStatusAsync(request, user);

            return true;
        }

        private async Task<User> GetUserAsync(long userId)
        {
            var user = await _repository.GetAsync<User>(userId);
            if (user == null)
            {
                throw new ApiException($"User with id: {userId} does not exist.", StatusCodes.Status404NotFound);
            }
            return user;
        }

        private async Task ValidateExternalProviderDetailsAsync(ActivateUserRequestModel request, User user)
        {
            request.ModifiedBy = request.CurrentUserId;
            var ems = await _userService.GetEms(request.AdminGroupId) ?? _userBusinessSettings.InternalEms;

            var providerAndFirmDetails = await _userProvidersService.IsProviderExist(ems);
            if (string.IsNullOrEmpty(ems))
            {
                throw new ApiException("No Ems found for the given group", 400);
            }
            else if (!providerAndFirmDetails.IsproviderExist)
            {
                throw new ApiException("No service provider found for the given client", 400);
            }
            else if (!providerAndFirmDetails.IsFirmExist)
            {
                throw new ApiException("No firm found for the given client", 400);
            }
            else if (user.ExternalProviderUserId > 0)
            {
                request.ExternalUserId = user.ExternalProviderUserId ?? 0;

                var returnValue = _externalProviderUserService.ActivateDeactivateUser(request, providerAndFirmDetails.FirmName);

                if (returnValue.ResponseType == ResponseType.NotFound && !string.IsNullOrEmpty(returnValue.ErrorMessage))
                {
                    throw new ApiException("Error occurred user not found in the external authentication system, error message: " + returnValue.ErrorMessage);
                }
                else if (returnValue.ResponseType == ResponseType.ExceptionError && !string.IsNullOrEmpty(returnValue.ErrorMessage))
                {
                    await _userRetryService.RetryActivateDeactivateUserAsync(request, providerAndFirmDetails.FirmName);
                    throw new ApiException(returnValue.ErrorMessage);
                }
                else if (returnValue.ResponseType == ResponseType.ValidationError && returnValue.ExternalProvidersErrors != null)
                {
                    _logger.LogError("Error occurred while activating/deactivating user in the external authentication system are as below:");
                    throw new ApiException("Error occurred while activating/deactivating user in the external authentication system. Please contact customer support.");
                }
            }
        }

        private async Task UpdateUserActivationStatusAsync(ActivateUserRequestModel request, User user)
        {
            await _userService.ActivateUser(request);
        }
    }
}
