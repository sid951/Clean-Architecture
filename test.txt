using System;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

public class MyClass
{
    private readonly HttpClient _httpClient;
    private readonly ILogger _logger;
    private readonly UserBusinessSettings _userBusinessSettings;

    public MyClass(HttpClient httpClient, ILogger logger, UserBusinessSettings userBusinessSettings)
    {
        _httpClient = httpClient;
        _logger = logger;
        _userBusinessSettings = userBusinessSettings;
    }

    public async Task<FisUserCreationAugmentedResult> DeleteUserFromExternalProvider(int userId, string firmName)
    {
        Console.WriteLine($"deleting user in external provider with user id {userId}");

        var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();

        if (userId != 0)
        {
            string url = $"{_userBusinessSettings.FisIdpUrlForUser}/batch/permanent/?id={userId}";

            _httpClient.DefaultRequestHeaders.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
            _httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
            _httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            _httpClient.DefaultRequestHeaders.Add("selected-firm-name", firmName);

            try
            {
                var httpResponse = await _httpClient.DeleteAsync(url);

                if (httpResponse.IsSuccessStatusCode)
                {
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                    Console.WriteLine($"User deleted in FIS IDP for external user id: {userId}");
                }
                else
                {
                    // Handle non-successful status codes here if needed.
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while deleting a user in external provider.";
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    Console.WriteLine($"Error occurred while deleting a user in external provider. Status Code: {httpResponse.StatusCode}");

                    // Read and handle the error response content if available
                    var errorResponseContent = await httpResponse.Content.ReadAsStringAsync();
                    if (!string.IsNullOrEmpty(errorResponseContent))
                    {
                        try
                        {
                            var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(errorResponseContent);
                            Console.WriteLine("Error response from the external provider:");
                            Console.WriteLine(JsonConvert.SerializeObject(errLogs, Formatting.Indented));
                            fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                        }
                        catch (JsonException ex)
                        {
                            // Error occurred while deserializing the error response content.
                            Console.WriteLine("Error occurred while deserializing the error response content:");
                            Console.WriteLine(ex.Message);
                        }
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                // The HttpClient request failed (e.g., network error, DNS resolution issue).
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while deleting a user in external provider.";
                Console.WriteLine("Error occurred while deleting a user in external provider: " + ex.Message);
            }
            catch (Exception ex)
            {
                // Other exceptions (e.g., JSON serialization, reading response content, etc.).
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while deleting a user in external provider.";
                Console.WriteLine("Error occurred while deleting a user in external provider: " + ex.Message);
            }
        }
        else
        {
            fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
            fisUserCreationAugmentedResult.ErrorMessage = "Invalid User Id";
        }
        return fisUserCreationAugmentedResult;
    }
}
