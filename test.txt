using MediatR;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Panorama.Users.API.Abstractions;
using Panorama.Users.API.Configuration;
using Panorama.Users.Domain.Enums;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Panorama.Users.API.Filters
{
    /// <summary>
    /// ValidationFilterAttribute
    /// </summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
    public class ValidationFilterAttribute : ActionFilterAttribute
    {
        private readonly ResourcesType _resource;
        private readonly SecurityRightType _securityEnum;
        /// <summary>
        /// ValidationFilterAttribute constructor
        /// </summary>
        public ValidationFilterAttribute()
        {
        }
        /// <summary>
        /// ValidationFilterAttribute
        /// </summary>
        /// <param name="resourcesEnum"></param>
        /// <param name="securityRightEnum"></param>
        public ValidationFilterAttribute(ResourcesType resourcesEnum, SecurityRightType securityRightEnum)
        {
            _resource = resourcesEnum;
            _securityEnum = securityRightEnum;
        }
        /// <summary>
        /// OnActionExecuting filter method
        /// </summary>
        /// <param name="context"></param>
        public override async void OnActionExecuting(ActionExecutingContext context)
        {

           
            int? securityRight = null;
           
            if (context.HttpContext.User?.Claims?.FirstOrDefault(x => x.Type == "userId")?.Value == null
                || context?.HttpContext?.User?.Claims?.FirstOrDefault(x => x.Type == "uniqueKey")?.Value == null)
            {
                context.Result = new UnauthorizedObjectResult("Unauthorized User");
                return;
            }
            var appType = context.HttpContext.Request.Headers["apptype"].FirstOrDefault() ?? "other";         
            var currentDeviceFingerPrint = DeviceFingerPrint.GenerateFingurePrint(context.HttpContext, appType);
            if (currentDeviceFingerPrint != context?.HttpContext?.User?.Claims?.FirstOrDefault(x => x.Type == "uniqueKey")?.Value)
            {
                context.Result = new UnauthorizedObjectResult("Unauthorized User");
                return;
            }
            if (!long.TryParse(UserClaims.UserId().ToString(), out var CurrentLoggedInUserId) || CurrentLoggedInUserId <= 0)
            {
                context.Result = new UnauthorizedObjectResult("Unauthorized User");
                return;
            }
            var dalRepository = (IUserRepository)context.HttpContext.RequestServices.GetService(typeof(IUserRepository));
            if (context.HttpContext != null && context.HttpContext.Request != null)
            {
                if (_resource == ResourcesType.ManageGroups && _securityEnum == SecurityRightType.CreateGroup)
                {
                    var vals = context.ActionArguments.Values.AsEnumerable().FirstOrDefault();
                    System.Reflection.PropertyInfo pi = vals?.GetType().GetProperty("AdminGroupId");
                    int AdminGroupId = (int)(pi?.GetValue(vals, null));
                    if (AdminGroupId > 0)
                    {
                        securityRight = (int)SecurityRightType.ModifyGroup;
                    }
                }

                if (_resource == ResourcesType.ManageUsers && _securityEnum == SecurityRightType.CreateMember && CurrentLoggedInUserId > 0)
                {
                    securityRight = (int)SecurityRightType.ModifyMember;
                }

            }
            if (CurrentLoggedInUserId > 0)
            {
                var param = new Dictionary<string, object>();
                param.Add("ResourceId", (int)_resource);
                param.Add("SecurityRightId", securityRight == null ? (int)_securityEnum : (int)securityRight);
                param.Add("UserId", CurrentLoggedInUserId);
                var responseData = await dalRepository.ExecuteSPSingleAsync<bool>("usp_GetPermissions", param).ConfigureAwait(false);
                if (!responseData)
                {
                    context.Result = new UnauthorizedObjectResult("Unauthorized User");
                    return;
                }
            }
            else
            {
                context.Result = new BadRequestObjectResult("Unable to fetch headers for user");
                return;
            }

            base.OnActionExecuting(context);
        }       
    }
}
