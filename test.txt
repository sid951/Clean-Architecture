using MediatR;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Panorama.Users.API.Abstractions;
using Panorama.Users.API.Configuration;
using Panorama.Users.Domain.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Panorama.Users.API.Filters
{
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)]
    public class ValidationFilterAttribute : ActionFilterAttribute
    {
        private readonly ResourcesType _resource;
        private readonly SecurityRightType _securityEnum;

        public ValidationFilterAttribute(ResourcesType resourcesEnum, SecurityRightType securityRightEnum)
        {
            _resource = resourcesEnum;
            _securityEnum = securityRightEnum;
        }

        public override async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            if (!IsAuthorizedUser(context))
            {
                context.Result = new UnauthorizedObjectResult("Unauthorized User");
                return;
            }

            if (!IsDeviceAuthorized(context))
            {
                context.Result = new UnauthorizedObjectResult("Unauthorized User");
                return;
            }

            if (!IsLoggedInUser(context, out var CurrentLoggedInUserId))
            {
                context.Result = new UnauthorizedObjectResult("Unauthorized User");
                return;
            }

            var dalRepository = (IUserRepository)context.HttpContext.RequestServices.GetService(typeof(IUserRepository));
            var securityRight = await GetSecurityRightAsync(context, CurrentLoggedInUserId);

            if (!await IsResourceAllowedAsync(dalRepository, securityRight))
            {
                context.Result = new UnauthorizedObjectResult("Unauthorized User");
                return;
            }

            await next();
        }

        private bool IsAuthorizedUser(ActionExecutingContext context)
        {
            return context.HttpContext.User?.Claims?.FirstOrDefault(x => x.Type == "userId")?.Value != null
                && context?.HttpContext?.User?.Claims?.FirstOrDefault(x => x.Type == "uniqueKey")?.Value != null;
        }

        private bool IsDeviceAuthorized(ActionExecutingContext context)
        {
            var appType = context.HttpContext.Request.Headers["apptype"].FirstOrDefault() ?? "other";
            var currentDeviceFingerPrint = DeviceFingerPrint.GenerateFingurePrint(context.HttpContext, appType);
            return currentDeviceFingerPrint == context?.HttpContext?.User?.Claims?.FirstOrDefault(x => x.Type == "uniqueKey")?.Value;
        }

        private bool IsLoggedInUser(ActionExecutingContext context, out long CurrentLoggedInUserId)
        {
            CurrentLoggedInUserId = 0;
            return long.TryParse(UserClaims.UserId().ToString(), out CurrentLoggedInUserId) && CurrentLoggedInUserId > 0;
        }

        private async Task<int?> GetSecurityRightAsync(ActionExecutingContext context, long CurrentLoggedInUserId)
        {
            if (CurrentLoggedInUserId <= 0)
                return null;

            if (_resource == ResourcesType.ManageGroups && _securityEnum == SecurityRightType.CreateGroup)
            {
                var vals = context.ActionArguments.Values.AsEnumerable().FirstOrDefault();
                System.Reflection.PropertyInfo pi = vals?.GetType().GetProperty("AdminGroupId");
                int AdminGroupId = (int)(pi?.GetValue(vals, null));
                return AdminGroupId > 0 ? (int)SecurityRightType.ModifyGroup : null;
            }

            if (_resource == ResourcesType.ManageUsers && _securityEnum == SecurityRightType.CreateMember && CurrentLoggedInUserId > 0)
            {
                return (int)SecurityRightType.ModifyMember;
            }

            return null;
        }

        private async Task<bool> IsResourceAllowedAsync(IUserRepository dalRepository, int? securityRight)
        {
            if (securityRight == null)
            {
                securityRight = (int)_securityEnum;
            }

            var param = new Dictionary<string, object>
            {
                { "ResourceId", (int)_resource },
                { "SecurityRightId", securityRight },
                { "UserId", UserClaims.UserId() }
            };

            return await dalRepository.ExecuteSPSingleAsync<bool>("usp_GetPermissions", param).ConfigureAwait(false);
        }
    }
}
