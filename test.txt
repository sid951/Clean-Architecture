using System;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

public class MyClass
{
    private readonly HttpClient _httpClient;
    private readonly ILogger _logger;
    private readonly UserBusinessSettings _userBusinessSettings;

    public MyClass(HttpClient httpClient, ILogger logger, UserBusinessSettings userBusinessSettings)
    {
        _httpClient = httpClient;
        _logger = logger;
        _userBusinessSettings = userBusinessSettings;
    }

    public async Task<FisUserCreationAugmentedResult> AddUserToExternalProvider(CreateUserCommandRequestModel model)
    {
        var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();
        var getDepartmentDetails = GetDepartment(ref fisUserCreationAugmentedResult, model.FirmName);
        var getUserProfileDetails = GetUserProfile(ref fisUserCreationAugmentedResult, model.FirmName);
        var getFisIdpUserModel = GetFisIdpUserModel(model, model.FirmName, getDepartmentDetails, getUserProfileDetails);

        try
        {
            string url = _userBusinessSettings.FisIdpUrlForUser;
            var json = JsonConvert.SerializeObject(getFisIdpUserModel, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            _httpClient.DefaultRequestHeaders.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
            _httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
            _httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            _httpClient.DefaultRequestHeaders.Add("selected-firm-name", model.FirmName);

            var httpResponse = await _httpClient.PostAsync(url, content);

            if (httpResponse.IsSuccessStatusCode)
            {
                var result = await httpResponse.Content.ReadAsStringAsync();
                var fisIdpUser = JsonConvert.DeserializeObject<FisIdpUserModel>(result);
                fisUserCreationAugmentedResult.ExternalUserId = fisIdpUser.Id;
                fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                _logger.LogInformation($"User Created in FIS IDP for username {model.UserName} with external user id {fisIdpUser.Id}");
            }
            else
            {
                var errorResponseContent = await httpResponse.Content.ReadAsStringAsync();
                var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(errorResponseContent);

                _logger.LogError("Logging error string received from fis IDP: " + errorResponseContent);

                // Handle the error response accordingly
                // ...

                fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
            }
        }
        catch (HttpRequestException ex)
        {
            _logger.LogError("Error occurred while creating a user in external provider: " + ex.Message);
            fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
            fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while creating a user in the external provider.";
        }
        catch (Exception ex)
        {
            _logger.LogError("Error occurred while creating a user in external provider: " + ex.Message);
            fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
            fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while creating a user in the external provider.";
        }

        return fisUserCreationAugmentedResult;
    }

    // Other methods in your class
}
