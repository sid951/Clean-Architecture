using AutoMapper;
using AutoWrapper.Wrappers;
using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Panorama.Users.API.Handler.CommandHandler
{
    using Panorama.Core.Application.Abstractions.Services;
    using Panorama.Core.Audit;
    using Panorama.Core.Infrastructure.Enums;
    using Panorama.Core.Infrastructure.Services;
    using Panorama.Users.API.Abstractions;
    using Panorama.Users.Domain;
    using Panorama.Users.Domain.RequestModels.CommandRequestModels;
    using Panorama.Users.ExternalProvider.Abstractions;

    /// <summary>
    /// Class handler used to reset password failure
    /// </summary>
    public class ResetPasswordFailureCommandHandler : BaseService, IRequestHandler<ResetPasswordFailureRequestModel, bool>
    {
        
        private readonly IExternalProviderUserService _externalProviderUserService;     
        private readonly ILogger _logger;
        private readonly IUserRetryService _userRetryService;
        private readonly IUserService _userService;
        private readonly IUserProvidersService _userProvidersService;

        /// <summary>
        /// contructor for User update status
        /// </summary>
        /// <param name="repository"></param>
        /// <param name="externalProviderUserService"></param>
        /// <param name="logger"></param>
        /// <param name="userRetryService"></param>
        /// <param name="userService"></param>
        /// <param name="userProvidersService"></param>
        public ResetPasswordFailureCommandHandler(IUserRepository repository,IExternalProviderUserService externalProviderUserService,
           ILogger<UpdateUserCommandHandelr> logger, IUserRetryService userRetryService,
           IUserService userService, IUserProvidersService userProvidersService)
           : base(repository)
        {
           
            _externalProviderUserService = externalProviderUserService;
            _logger = logger;
            _userRetryService = userRetryService;
            _userService = userService;
            _userProvidersService = userProvidersService;
        }

        /// <summary>
        /// handler used to update user status
        /// </summary>
        /// <param name="request"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public async Task<bool> Handle(ResetPasswordFailureRequestModel request, CancellationToken cancellationToken)
        {
            var user = await _repository.GetAsync<User>(request.UserId);

            if (user == null)
            {
                throw new ApiException($"User with id: {request.UserId} does not exist.", StatusCodes.Status404NotFound);
            }


            request.ModifiedBy = request.CurrentUserId;

            var ems = await _userService.GetEms(Convert.ToInt64(request.AdminGroupId));
            var providerAndFirmDetails = await _userProvidersService.IsProviderExist(ems);
            if (!string.IsNullOrEmpty(ems))
            {
                if (!providerAndFirmDetails.IsproviderExist)
                {
                    throw new ApiException("No service provider found for the given client", 400);
                }
                else if (!providerAndFirmDetails.IsFirmExist)
                {
                    throw new ApiException("No firm found for the given client", 400);
                }
                else
                {
                    if (user.ExternalProviderUserId > 0)
                    {
                        request.ExternalUserId = user.ExternalProviderUserId ?? 0;

                        SuspendUserRequestModel suspendUserRequestModel = new SuspendUserRequestModel()
                        {
                            AdminGroupId = request.AdminGroupId,
                            ExternalUserId = request.ExternalUserId,
                            Status = false,
                            UserId = request.UserId
                        };

                        dynamic returnValue = null;

                        returnValue = _externalProviderUserService.SuspendUser(suspendUserRequestModel, providerAndFirmDetails.FirmName);

                        if (returnValue.ResponseType == ResponseType.NotFound && !String.IsNullOrEmpty(returnValue.ErrorMessage))
                        {
                            throw new ApiException("Error occurred user not found in external authentication system, error message: " + returnValue.ErrorMessage);
                        }
                        else if (returnValue.ResponseType == ResponseType.ExceptionError && !String.IsNullOrEmpty(returnValue.ErrorMessage))
                        {

                            await _userRetryService.RetrySuspendUserAsync(suspendUserRequestModel, providerAndFirmDetails.FirmName);
                            throw new ApiException(returnValue.ErrorMessage);
                        }
                        else if (returnValue.ResponseType == ResponseType.ValidationError && returnValue.ExternalProvidersErrors != null)
                        {
                            _logger.LogError("Error occurred while reseting password failure count in external authentication system are as below:");

                            foreach (var msg in returnValue.ExternalProvidersErrors.Messages)
                            {
                                _logger.LogError($"Property Name: {msg.Property} Error Message: {msg.Message}");
                            }

                            throw new ApiException("Error occurred while reseting password failure count in external authentication system. Please contact customer support.");
                        }

                        await _userService.ResetPassordFailure(request);
                    }

                    return true;
                }
            }
            else
            {
                throw new ApiException("No Ems found for the given group", 400);
            }
        }
    }
}
