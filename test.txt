using System;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

public class MyClass
{
    private readonly HttpClient _httpClient;
    private readonly ILogger _logger;
    private readonly UserBusinessSettings _userBusinessSettings;

    public MyClass(HttpClient httpClient, ILogger logger, UserBusinessSettings userBusinessSettings)
    {
        _httpClient = httpClient;
        _logger = logger;
        _userBusinessSettings = userBusinessSettings;
    }

    public async Task<FisIdpDepartmentDetails> GetDepartment(ref FisUserCreationAugmentedResult fisUserCreationAugmentedResult, string firmName)
    {
        _logger.LogInformation("Getting department from external provider");
        FisIdpDepartmentDetails fisIdpDepartmentModel = null;

        if (!string.IsNullOrEmpty(firmName))
        {
            string url = _userBusinessSettings.FisIdpDepartmentUrl;
            _httpClient.DefaultRequestHeaders.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
            _httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
            _httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            _httpClient.DefaultRequestHeaders.Add("selected-firm-name", firmName);

            try
            {
                var httpResponse = await _httpClient.GetAsync(url);

                if (httpResponse.IsSuccessStatusCode)
                {
                    var responseContent = await httpResponse.Content.ReadAsStringAsync();
                    fisIdpDepartmentModel = JsonConvert.DeserializeObject<FisIdpDepartmentDetails>(responseContent);
                    
                    if (fisIdpDepartmentModel?.data == null)
                    {
                        fisUserCreationAugmentedResult.ErrorMessage = "Department not found in external authentication system";
                        fisUserCreationAugmentedResult.ResponseType = ResponseType.NotFound;
                    }
                }
                else
                {
                    fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while finding a department in external provider.";
                    fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                    _logger.LogError($"Error occurred while finding a department in external provider. Status Code: {httpResponse.StatusCode}");

                    // Read and handle the error response content if available
                    var errorResponseContent = await httpResponse.Content.ReadAsStringAsync();
                    if (!string.IsNullOrEmpty(errorResponseContent))
                    {
                        try
                        {
                            var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(errorResponseContent);
                            _logger.LogError("Error response from the external provider:");
                            _logger.LogError(JsonConvert.SerializeObject(errLogs));
                            fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
                        }
                        catch (JsonException ex)
                        {
                            // Error occurred while deserializing the error response content.
                            _logger.LogError("Error occurred while deserializing the error response content:");
                            _logger.LogError(ex.Message);
                        }
                    }
                }
            }
            catch (HttpRequestException ex)
            {
                // The HttpClient request failed (e.g., network error, DNS resolution issue).
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while fetching department from external provider.";
                _logger.LogError("Error occurred while fetching department from external provider: " + ex.Message);
            }
            catch (Exception ex)
            {
                // Other exceptions (e.g., JSON serialization, reading response content, etc.).
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while fetching department from external provider.";
                _logger.LogError("Error occurred while fetching department from external provider: " + ex.Message);
            }
        }

        return fisIdpDepartmentModel;
    }
}
