using System;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

public class MyClass
{
    private readonly HttpClient _httpClient;
    private readonly ILogger _logger;
    private readonly UserBusinessSettings _userBusinessSettings;

    public MyClass(HttpClient httpClient, ILogger logger, UserBusinessSettings userBusinessSettings)
    {
        _httpClient = httpClient;
        _logger = logger;
        _userBusinessSettings = userBusinessSettings;
    }

    public async Task<FisUserCreationAugmentedResult> SuspendUser(SuspendUserRequestModel requestModel, string firmName)
    {
        _logger.LogInformation($"User suspend/resumed Initiated for External UserId {requestModel.ExternalUserId}");

        var fisUserCreationAugmentedResult = new FisUserCreationAugmentedResult();

        var status = requestModel.Status ? 1 : 0;

        _logger.LogInformation($"User status is {status} for External UserId {requestModel.ExternalUserId}");

        try
        {
            // Prepare the PUT request URL.
            string url = $"{_userBusinessSettings.FisIdpUrlForUser}suspend/{requestModel.ExternalUserId}?status={status}";

            // Serialize the requestModel to JSON.
            string json = JsonConvert.SerializeObject(requestModel, new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() });
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            // Set request headers.
            _httpClient.DefaultRequestHeaders.Add("X-SunGard-IdP-API-Key", _userBusinessSettings.PanoramaRewriteApiKey);
            _httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + _userBusinessSettings.AccessToken);
            _httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
            _httpClient.DefaultRequestHeaders.Add("selected-firm-name", firmName);

            // Send the PUT request.
            HttpResponseMessage httpResponse = await _httpClient.PutAsync(url, content);

            if (httpResponse.IsSuccessStatusCode)
            {
                fisUserCreationAugmentedResult.ResponseType = ResponseType.Success;
                _logger.LogInformation($"User suspend/resumed in External portal for UserId : {requestModel.ExternalUserId}");
            }
        }
        catch (HttpRequestException ex)
        {
            _logger.LogError("Error occurred while suspend/resumed user in external provider." + ex.Message);

            try
            {
                string errorResponse = await ex.Response.Content.ReadAsStringAsync();
                var errLogs = JsonConvert.DeserializeObject<FisIdpValidationModel>(errorResponse);

                _logger.LogError("Logging error string received from external provider: " + errorResponse);

                fisUserCreationAugmentedResult.ResponseType = ResponseType.ValidationError;
                fisUserCreationAugmentedResult.ExternalProvidersErrors = errLogs;
            }
            catch (Exception exception)
            {
                fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
                fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while activated/deactivated user in external provider.";
                _logger.LogError("Error occurred while suspend/resumed user in external provider." + exception.Message);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("Error occurred while suspend/resumed user in external provider: " + ex.Message);
            fisUserCreationAugmentedResult.ResponseType = ResponseType.ExceptionError;
            fisUserCreationAugmentedResult.ErrorMessage = "Error occurred while activated/deactivated user in external provider.";
        }

        return fisUserCreationAugmentedResult;
    }
}
